type Query {
  comment: Comment!
  post: Post!
  user: User!
  comments: [Comment!]!
  posts(query: String): [Post!]!
  users(query: String): [User!]!
}

type Mutation {
  # User
  createUser(data: CreateUserInput!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput): User!
  # Post
  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput): Post!
  # Comment
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

# ------------ Input type --------------
# User Input
input CreateUserInput {
  name: String!
  email: String!
}

input UpdateUserInput {
  name: String
  email: String
}

# User Post
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

# User Input
input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

# ------------ Custom type --------------
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}
